generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DashboardStatus {
  active
  archived
  draft
}

model Enterprise {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  // Credenciais do Usuário Master do Power BI para esta Empresa
  // Estes campos são opcionais, pois uma Enterprise pode não ter integração com Power BI
  pbMasterEmail             String? // Email do usuário master do Power BI para esta empresa
  pbMasterPasswordEncrypted String? // Senha do usuário master (CRIPTOGRAFADA com AES, não hash)
  pbClientId                String? // Client ID do app Azure AD
  pbClientSecretEncrypted   String? // Client Secret do app Azure AD (CRIPTOGRAFADO com AES)
  pbTenantId                String? // Tenant ID do Azure AD

  // Access Token do Azure AD em cache para o Usuário Master
  pbAccessToken          String?
  pbAccessTokenExpiresAt DateTime?

  users                EnterpriseUser[]
  groups               Group[]
  roles                Role[]
  permissions          Permission[]
  sessions             Session[]
  powerBIReportConfigs PowerBIReportConfig[]
}

model User {
  id              String    @id @default(cuid())
  name            String
  email           String    @unique
  password        String
  isActive        Boolean   @default(true)
  lastLogin       DateTime?
  isEmailVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())

  enterprises EnterpriseUser[] // novo relacionamento N:N com EnterpriseUser
}

model EnterpriseUser {
  userId       String
  enterpriseId String

  user       User       @relation(fields: [userId], references: [id])
  enterprise Enterprise @relation(fields: [enterpriseId], references: [id])

  isOwner  Boolean  @default(false)
  joinedAt DateTime @default(now())

  groups      GroupUser[]
  roles       RoleUser[]
  permissions PermissionUser[]
  sessions    Session[]
  auditLogs   AuditLog[]

  @@id([userId, enterpriseId])
}

model PowerBIReportConfig {
  id           String     @id @default(cuid())
  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  powerBIGroupId    String // ID do Workspace (Group ID) no Power BI
  powerBIGroupName  String? // Nome do Workspace (para exibição)
  powerBIReportId   String // ID do Relatório no Power BI
  powerBIReportName String? // Nome do Relatório (para exibição)

  // Embed Token do Power BI em cache para este relatório específico
  pbEmbedToken          String?
  pbEmbedTokenExpiresAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([enterpriseId, powerBIGroupId, powerBIReportId]) // Garante que um relatório em um workspace é único por empresa
}

model Group {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  users GroupUser[]
}

model GroupUser {
  groupId                    String
  enterpriseUserUserId       String
  enterpriseUserEnterpriseId String

  group          Group          @relation(fields: [groupId], references: [id])
  enterpriseUser EnterpriseUser @relation(fields: [enterpriseUserUserId, enterpriseUserEnterpriseId], references: [userId, enterpriseId])

  joinedAt DateTime @default(now())

  @@id([groupId, enterpriseUserUserId, enterpriseUserEnterpriseId])
}

model Role {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  users       RoleUser[]
  permissions PermissionRole[]

  @@unique([enterpriseId, name])
}

model RoleUser {
  roleId                     String
  enterpriseUserUserId       String
  enterpriseUserEnterpriseId String

  role           Role           @relation(fields: [roleId], references: [id])
  enterpriseUser EnterpriseUser @relation(fields: [enterpriseUserUserId, enterpriseUserEnterpriseId], references: [userId, enterpriseId])

  joinedAt DateTime @default(now())

  @@id([roleId, enterpriseUserUserId, enterpriseUserEnterpriseId])
}

model Permission {
  id          String   @id @default(cuid())
  name        String
  description String
  createdAt   DateTime @default(now())

  enterpriseId String
  enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])

  users PermissionUser[]
  roles PermissionRole[]

  @@unique([enterpriseId, name])
}

model PermissionUser {
  permissionId               String
  enterpriseUserUserId       String
  enterpriseUserEnterpriseId String

  permission     Permission     @relation(fields: [permissionId], references: [id])
  enterpriseUser EnterpriseUser @relation(fields: [enterpriseUserUserId, enterpriseUserEnterpriseId], references: [userId, enterpriseId])

  joinedAt DateTime @default(now())

  @@id([permissionId, enterpriseUserUserId, enterpriseUserEnterpriseId])
}

model PermissionRole {
  permissionId String
  roleId       String

  permission Permission @relation(fields: [permissionId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  joinedAt DateTime @default(now())

  @@id([permissionId, roleId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  enterpriseId String
  refreshToken String   @unique
  ipAddress    String
  userAgent    String
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  isRevoked    Boolean

  enterpriseUser EnterpriseUser @relation(fields: [userId, enterpriseId], references: [userId, enterpriseId])
  Enterprise     Enterprise     @relation(fields: [enterpriseId], references: [id])
}

model AuditLog {
  id           String   @id @default(cuid())
  action       String
  entityType   String
  entityId     String
  userId       String
  enterpriseId String
  timestamp    DateTime @default(now())
  details      Json?

  enterpriseUser EnterpriseUser @relation(fields: [userId, enterpriseId], references: [userId, enterpriseId])
}
